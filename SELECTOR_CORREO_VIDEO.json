{
  "name": "SELECTOR CORREO VIDEO",
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            },
            {
              "hour": 12,
              "minute": 1
            }
          ]
        },
        "simple": false,
        "filters": {
          "labelIds": [
            "INBOX",
            "UNREAD"
          ]
        },
        "options": {
          "downloadAttachments": true
        }
      },
      "id": "c9651c4a-fd9b-4639-b9f2-f46f695e40bf",
      "name": "Gmail Trigger",
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.1,
      "position": [
        240,
        40
      ],
      "credentials": {
        "gmailOAuth2": {
          "id": "Kd4SL28WS6IbVNRy",
          "name": "Gmail account 2"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.appsheet.com/api/v2/apps/28523808-32e0-4dfc-899c-ba3eea8bfb4d/tables/REGISTROS/Action?applicationAccessKey=V2-MSGGu-KxfhN-yRkWb-tkemR-wqSjk-K2vFw-71N2z-Myljc",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"Action\": \"Add\",\n  \"Properties\": {\n\"Locale\": \"es-CO\",\n\"Timezone\": \"America/Bogota\"\n  },\n  \"Rows\": [\n    {\n\"Nombre del Cliente\": \"{{ $json['Nombre del Cliente'] }}\",\n\"Correo del Cliente\": \"{{ $json['Correo del Cliente'] }}\",\n\"Teléfono del Cliente\": \"{{ $json['Teléfono del Cliente'] }}\",\n\"Asunto\": \"{{ $json.Asunto }}\",\n\"Mensaje\": \"{{ $json.Mensaje }}\",\n\"Categoría de Consulta\": \"{{ $json['Categoría de Consulta'] }}\",\n\"Prioridad\": \"{{ $json.Prioridad }}\",\n\"Estado\": \"{{ $json.Estado }}\",\n\"Fecha de Respuesta\": \"{{ $json['Fecha de Respuesta'] }}\",\n\"Enlace a Documento o Archivo\": \"\",\n\"Última Actualización\": \"\"\n      \n    }\n  ]\n}",
        "options": {}
      },
      "id": "2297f37e-139d-4598-8e1b-d0bb3447e020",
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1600,
        40
      ]
    },
    {
      "parameters": {
        "jsCode": "const inputData = $input.first();\n\n// Función para limpiar el texto\nfunction cleanText(text) {\n    if (typeof text !== 'string') return text;\n    return text\n        .replace(/\\\\n/g, ' ')         // Reemplaza \\n con espacio\n        .replace(/\\n/g, ' ')          // Reemplaza saltos de línea reales con espacio\n        .replace(/\\\\r/g, ' ')         // Reemplaza \\r con espacio\n        .replace(/\\r/g, ' ')          // Reemplaza retornos de carro reales con espacio\n        .replace(/\\s+/g, ' ')         // Reemplaza múltiples espacios con uno solo\n        .replace(/\\\\\"/g, '\"')         // Maneja comillas escapadas\n        .replace(/\\\\/g, '')           // Elimina backslashes restantes\n        .trim();                      // Elimina espacios al inicio y final\n}\n\n// Función para limpiar recursivamente un objeto\nfunction cleanObject(obj) {\n    if (typeof obj !== 'object' || obj === null) {\n        return cleanText(obj);\n    }\n    \n    if (Array.isArray(obj)) {\n        return obj.map(item => cleanObject(item));\n    }\n    \n    const cleanObj = {};\n    for (const [key, value] of Object.entries(obj)) {\n        cleanObj[key] = cleanObject(value);\n    }\n    return cleanObj;\n}\n\ntry {\n    // Si el mensaje viene como string JSON, intentamos parsearlo\n    if (inputData?.json?.message?.content) {\n        let content = inputData.json.message.content;\n        \n        // Si es string, limpiamos antes de parsear\n        if (typeof content === 'string') {\n            content = cleanText(content);\n            try {\n                const parsedContent = JSON.parse(content);\n                return cleanObject(parsedContent);\n            } catch (parseError) {\n                // Si no se puede parsear, retornamos el contenido limpio\n                return content;\n            }\n        }\n        // Si no es string, limpiamos el objeto directamente\n        return cleanObject(content);\n    }\n    \n    // Si no hay message.content, limpiamos todo el objeto de entrada\n    return cleanObject(inputData.json);\n    \n} catch (error) {\n    console.log('Error procesando datos:', error);\n    // Como último recurso, retornamos los datos originales\n    return inputData.json;\n}"
      },
      "id": "8a8b3321-c3ae-45e4-b2e8-fd3431a7ec54",
      "name": "Code1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1140,
        40
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "return {\n  json: {\n    id: $json.id,\n    labels: JSON.stringify($json.labelIds),\n    from: $json.from.text, // Usamos .text para obtener el formato correcto del remitente\n    subject: $json.subject,\n    snippet: $json.text.substring(0, 200), // Tomamos los primeros 200 caracteres como snippet\n    date: $json.date, // Agregamos la fecha para el timestamp\n    // Agregamos el mensaje completo por si se necesita analizar el contenido\n    fullMessage: $json.text\n  }\n};"
      },
      "id": "25a408e6-e388-49fe-bbdf-2c67d250ea2a",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        500,
        40
      ]
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Eres un asistente especializado en clasificar correos electrónicos médicos. Tu objetivo es analizar profundamente el contexto, intención y urgencia real de cada mensaje.\n\nFORMATO DE ENTRADA:\nid:{{ $json.id }}\nLabels: {{$json.labels}}\nFrom: {{$json.from}}\nSubject: {{$json.subject}}\nSnippet: {{$json.snippet}}\nFullMessage: {{$json.fullMessage}}\n\nREGLAS DE CLASIFICACIÓN PROMOCIONAL:\nResponde \"CORREO_PROMOCIONAL\" si detectas:\n1. INDICADORES DIRECTOS:\n- Labels promocionales (CATEGORY_PROMOTIONS, CATEGORY_SOCIAL, CATEGORY_UPDATES)\n- Remitentes masivos (info@, marketing@, noreply@, news@, notifications@)\n- Términos promocionales (newsletter, subscribe, unsubscribe, webinar)\n\n2. PATRONES DE CONTENIDO PROMOCIONAL:\n- Ofertas o descuentos\n- Invitaciones masivas a eventos\n- Boletines informativos\n- Campañas de marketing\n- Comunicaciones masivas no personalizadas\n\nPara correos NO promocionales, responde con este JSON (evita estos caracteres al inicio y al final ```json\\n):\n{\n    \"Nombre del Cliente\": \"[nombre completo]\",\n    \"Correo del Cliente\": \"[email]\",\n    \"Teléfono del Cliente\": \"[número si existe]\",\n    \"Asunto\": \"[asunto original]\",\n    \"Mensaje\": \"[contenido completo]\",\n    \"Categoría de Consulta\": \"[categoría]\",\n    \"Prioridad\": \"[nivel]\",\n    \"Estado\": \"Nuevo\"\n}\n\nANÁLISIS PROFUNDO DE CATEGORIZACIÓN:\n\nCITAS MÉDICAS:\n- Solicitudes de agendamiento\n- Cambios o cancelaciones\n- Consultas sobre horarios disponibles\n- Verificación de citas existentes\n- Seguimientos post-consulta\n- Preparaciones para citas\n\nAUTORIZACIONES:\n- Solicitudes de procedimientos\n- Autorizaciones de medicamentos\n- Órdenes médicas\n- Validaciones de cobertura\n- Renovaciones de tratamientos\n- Aprobaciones de especialistas\n\nFACTURACIÓN:\n- Consultas de pagos\n- Estados de cuenta\n- Planes de pago\n- Copagos y deducibles\n- Reembolsos\n- Facturas pendientes\n- Cobertura de seguros\n\nRECLAMOS:\n- Quejas sobre servicio\n- Demoras en atención\n- Problemas con personal médico\n- Inconformidades con tratamientos\n- Solicitudes de cambio de médico\n- Problemas de acceso a servicios\n\nGENERAL:\n- Consultas informativas\n- Solicitudes de documentación\n- Actualización de datos\n- Certificaciones\n- Historias clínicas\n\nCRITERIOS DE PRIORIDAD:\n\nALTA:\n- Menciones explícitas de urgencia o emergencia\n- Síntomas graves o dolor intenso\n- Medicamentos críticos o de control\n- Tratamientos en curso que no pueden interrumpirse\n- Situaciones que afectan calidad de vida inmediata\n- Casos relacionados con embarazo o enfermedades crónicas\n- Referencias a condiciones que requieren atención inmediata\n\nMEDIA:\n- Autorizaciones regulares\n- Medicamentos de mantenimiento\n- Citas de seguimiento importantes\n- Etiquetado como IMPORTANT\n- Situaciones que requieren atención pero no son críticas\n- Consultas de especialistas no urgentes\n- Trámites administrativos importantes\n\nBAJA:\n- Consultas generales\n- Solicitudes de información\n- Trámites administrativos rutinarios\n- Actualizaciones de datos\n- Solicitudes de documentación no urgente\n- Seguimientos de rutina\n\nANÁLISIS CONTEXTUAL:\n1. Evaluar el tono y urgencia real del mensaje\n2. Identificar palabras clave en contexto\n3. Analizar la naturaleza del problema o solicitud\n4. Considerar el impacto en la salud del paciente\n5. Evaluar la inmediatez requerida de respuesta\n6. Identificar si hay documentación o seguimiento pendiente\n7. Considerar el historial de interacciones si está disponible\n"
            }
          ]
        },
        "options": {}
      },
      "id": "327991f8-23b9-4493-9a69-0991c7dc2074",
      "name": "OpenAI",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.5,
      "position": [
        720,
        40
      ],
      "credentials": {
        "openAiApi": {
          "id": "2dYQGLulSXWiw9O7",
          "name": "OpenAi account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "a9d6f848-ece2-4fe3-8aa5-f273f934d6d6",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b38170b8d851a2d7a677391dd9471131a98fa71876b94a9ee4ba97437a05ffc2"
  },
  "id": "whgQNHAdpPwsvUNx",
  "tags": []
}
